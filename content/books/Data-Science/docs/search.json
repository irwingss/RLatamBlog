[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"Esta es la versión en página web del libro “Estadística y Análisis de Datos para Ciencias, con Aplicaciones en R”, publicado por IC PRESS, Fondo Editorial del Instituto de Ciencias Antonio Brack. Esta página web contiene el manuscrito completo del autor antes de la edición final de su publicación en PDF. Si desea solicitar una copia del libro electrónico, puede hacerlo través de Amazon, Google Play o el propio Fondo Editorial del Instituto.Este libro está desarrollado en base al programa “Data Science: Estadística y Análisis de Datos con R”, un conglomerado de cinco cursos dictados en el ´Instituto de Ciencias Antonio Brack través de la plataforma educativa online masterX. De igual manera, el libro sirve de soporte tanto para los estudiantes del programa o para aquellos que busquen un libro de referencia con el cual seguir sus estudios autodidactas.Este libro ha sido completamente escrito en R Markdown, utilizando RStudio. Si tienes alguna sugerencia, o detectas algún fallo ortográfico, o error de forma o de fondo, por favor enviar un mensaje isaldanau@gmail.com con el asunto de correo “Corrección Libro Estadística” .Esta página web es de libre uso dentro de los términos autorizados bajo la Licencia Internacional Reconocimiento Comercial - Sin Derivadas 4.0. Además, esta obra utiliza un Código de conducta para colaboradores. Al contribuir este libro, acepta cumplir sus términos. Finalmente, esta obra está alojada en Netlify, con código abierto disponible en Github.","code":""},{"path":"index.html","id":"cómo-usar-el-libro","chapter":"Bienvenida","heading":"¿Cómo usar el libro?","text":"Este libro busca llegar de manera sencilla al lector, por lo que se ha preferido resaltar ciertos contenidos como:","code":""},{"path":"prefacio.html","id":"prefacio","chapter":"Prefacio","heading":"Prefacio","text":"","code":""},{"path":"prefacio.html","id":"por-qué-r-para-estadística","chapter":"Prefacio","heading":"¿Por qué R para estadística?","text":"La estadística está presente en casi todas las ciencias. Tanto seas un científico, un analista, un médico, un consultor de biodiversidad, un ingeniero, un psicólogo, o un estudiante universitario, saber cómo analizar datos te abrirá muchas puertas oportunidades grandiosas. En este sentido, la programación arribado para quedarse en distintos campos de las ciencias. Inclusive, muchos expertos nivel mundial están de acuerdo con que el saber programar es el nuevo analfabetismo del futuro que parece ya ser del ahora (e.g. un post de Harvard University).En este nuevo paradigma, los profesionales estamos inmersos en la necesidad de actualizar nuestro bagaje de conocimentos, incluyendo al menos un lenguaje de programación orientado sus necesidades académicas, de investigación o educativas. Diversos lenguajes de programación son atractivos para investigadores y profesionales, pero ninguno esta tan orientado al desarrollo estadístico como R. Otras opciones populares son Python, MATLAB, C, C++, JavaScript, SQL, Scala, Julia, SAS.R es uno de los lenguajes más populares para ciencia de datos, siendo considerado uno de los más sencillos de aprender. R ofrece un gran ambiente para desarrollo estadístico y gráfico. Con él se puede desarrollar con simpleza estadística, ciencia de datos, big dada, machine learning, y actualmente, gracias la vinculación con python través de la librería reticulate y la adaptación de librerías de Python R , es posible aplicar con más soltura procedimientos tan complejos como el deep learning.Entre las cosas más interesantes de R se encuentra la amplia comunidad de desarrollo que lo respalda, con paquetes y soporte técnico libre y abierto en plataformas como StackOverflow, RStudio Community, R-Bloggers, además de repositorios en la nube como GitHub, GitLab o Bioconductor.","code":""},{"path":"prefacio.html","id":"a-quién-está-dirigido-este-libro","chapter":"Prefacio","heading":"¿A quién está dirigido este libro?","text":"Este libro está dedicado llevarte desde cero en el manejo del lenguaje de programación R, y su posterior aplicación en tópicos estadísticos también partir de nivel básico. Los capítulos de este libro están diseñados para ser independientes entre sí. Siéntete libre de saltar entre los capítulos y seleccionar aquellos que sean de tu interés en el momento.La progresión temática está adaptada la secuencia del programa de cinco cursos Data Science: Estadística y Análisis de Datos en R, ofrecido por el autor del libro, Irwing S. Saldaña, través del Instituto de Ciencias Antonio Brack. El programa comenzó ser dictado en 2020, y ha recibido estudiantes de diferentes partes de Latinoamérica, El Caribe y España, así como de diversos perfiles profesionales. Entre ellos: biólogos, médicos y otros profesionales de la salud, ingenieros, psicólogos, entre otros; además, profesionales de otras ramas tan afines las ciencias, como economistas, tecnólogos o especialistas en finanzas, que vieron en el programa una oportunidad de ampliar su gama de herramientas de análisis estadístico y poder aplicar novedosos métodos sus propias áreas de investigación.","code":""},{"path":"prefacio.html","id":"agradecimientos","chapter":"Prefacio","heading":"Agradecimientos","text":"FALTA","code":""},{"path":"prerrequisitos.html","id":"prerrequisitos","chapter":"Prerrequisitos","heading":"Prerrequisitos","text":"El desarrollo del libro es independiente del sistema operativo que maneja el estudiante. obstante, hay ciertas incompatibilidades o dificultades de uso para algunos pocos paquetes con Linux y macOS que en su momento serán comentados. La ejecución de todos los códigos del libro se han realizado utilizando el sistema operativo Windows 11. Se sugiere el uso del entorno RStudio por la versatilidad de uso, pero puedes usar el editor de código de tu preferencia.Se deberá utilizar las versiones listadas (o posteriores) de los programas siguientes según el sistema operativo recomendado:","code":""},{"path":"prerrequisitos.html","id":"para-windows","chapter":"Prerrequisitos","heading":"Para windows:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2021.09.1+372 DescargaRtools4.0 Descarga","code":""},{"path":"prerrequisitos.html","id":"para-macos","chapter":"Prerrequisitos","heading":"Para macOS:","text":"R version 4.1.2 (2021-11-01) – “Bird Hippie” DescargaRStudio Desktop 2021.09.1+372 DescargaXQuartz 2.8.1. DescargaRequerimientos mínimos del sistema para ejecutar RStudio:Procesadores de 2 núcleos (equivalente Intel® Core™ i3 o AMD Ryzen™ 3).4 Gb RAM.Espacio en almacenamiento de 100 Gb.Requerimientos recomendados del sistema para ejecutar RStudio:Procesadores de 4 más núcleos (equivalente Intel® Core™ i5 más o AMD Ryzen™ 5 más).8 más Gb RAM.Más de 100 Gb de espacio de almacenamiento.\n","code":""},{"path":"prerrequisitos.html","id":"librerías-y-bases-de-datos-a-utilizar-en-el-libro","chapter":"Prerrequisitos","heading":"Librerías y bases de datos a utilizar en el libro","text":"Se ha creado un paquete de acompañamiento de este libro, el que se debe instalar ejecutándo el código siguiente. Si conoces como ejecutar código, puedes revisar la sección Ejecutar código. ```El paso paso será:Abrir RStudio.En el teclado presionar: Control + shift + N o Command + shift + N. Esto creará un nuevo R script (para más información, revisa: Tipos de documentos en RStudio).Copiar en el R script el código mostrado continuación.Ejecutar el código (para más información, revisa: Ejecutar código) hasta la función instalar_paquetes_github().Una vez estén todas las librerías instaladas, se debe ejecutar la última función update.packages() para actualizar las que se encuentren desactualizadas.","code":"\n# Instalar la librería del libro\nremotes::install_github(\"irwingss/rBrack\")\n\n# Activar la librería\nlibraries(rBrack)\n\n# Ejecutar las funciones\ninstalar_paquetes_cran()\ninstalar_paquetes_github()\n\n# Actualizar las librerías\nupdate.packages(ask = FALSE)"},{"path":"introducción-a-r-básico.html","id":"introducción-a-r-básico","chapter":"Capítulo 1 Introducción a R básico","heading":"Capítulo 1 Introducción a R básico","text":"Esta primera sección está enteramente dedicada al desarrollo, manejo y comprensión del lenguaje de programación R (en adelante: “R”) en nivel básico. Se asume que el lector tiene instalados y configurados los programas R, RStudio y algún otro programa de soporte para el manejo de paquetes. Si cuentas con ninguno en tu computadora, visita la sección Prerequisitos de este libro.Una ventaja de los lenguajes de programación es que nos permiten definir una secuencia de análisis adaptada específicamente nuestro requerimiento analítico. El flujo de trabajo completo queda escrito en el código, y puede ser compartida con colegas cuando se necesite en trabajos colaborativos. Pero antes de aprender sobre los métodos analíticos, se necesita “hablar” bien el lenguaje R.Aprenderás trabajar con el código básico en R, crear variables, funciones, además de utilizar tidyverse para manejo y limpieza de bases de datos. Es esencial manejar estos conceptos antes de trabajar con estadística en R.","code":""},{"path":"introducción-a-r-básico.html","id":"primer-contacto-con-r","chapter":"Capítulo 1 Introducción a R básico","heading":"1.1 Primer contacto con R","text":"La forma simplificada de cómo funciona R incluye: dar una orden, presionar “enter” para que la computadora comience procesar la orden, y luego recibir un resultado. Eso es básicamente lo que se hace con cualquier lenguaje de programación.R es considerada como una calculadora con esteroides dado que puedes aplicar matemáticas con él; aquella ciencia sobre la que se cimentan las demás. Si puedes hacer ello, tienes las puertas abiertas aplicar estadística, análisis de diferentes tipos, generar gráficos y todo lo que te imagines. Y pues sí, también hay cosas algo bizarras en R, como poder crear tu propio calendario o usar gatitos en tu gráfico de dispersión de puntos.diferencia de los lenguajes humanos (idiomas), un lenguaje de programación debe estar escrito la perfección. hay espacio para una coma mal puesta, un paréntesis olvidado, o un nombre mal colocado. La computadora solo ejecutará la orden si todo está escrito exactamente como debe ser. Todos los ejemplos de este libro pueden ser ejecutados correctamente si los escribes tal y como es mostrado. Previo ello, se debe haber instalado y activado las librerías usar (para más detalle, revisa la sección Prerrequisitos).","code":""},{"path":"introducción-a-r-básico.html","id":"paneles-de-rstudio","chapter":"Capítulo 1 Introducción a R básico","heading":"1.2 Paneles de RStudio","text":"Existen diversos editores de código que permiten trabajar con R, pero ninguno con la versatilidad de RStudio. El programa está dividido en paneles que uno puede reorganizar conveniencia. Más allá de la posición o el orden de los paneles, es necesario que se sepa reconocerlos por su contenido, las pestañas que contiene, entre otros. Aquí se presentan los paneles en su posición clásica, junto con algunas barras y botones que se deben conocer al iniciar con RStudio.\nFIGURA 1.1: Panel de Trabajo. Aquí aparecerán los archivos de trabajo de R, sean R script o R Markdown. Además, es donde aparecen las bases de datos cuando se pide visualizarlas en RStudio.\n\nFIGURA 1.2: Consola. Es el panel donde se imprimen los resultados textuales y numéricos junto con el código que los genera.\n\nFIGURA 1.3: Panel de Ambiente. Las pestañas de este panel se puede intercambiar o reposicionar conveniencia con las del Panel Gráfico +. Aquí encontrarás: el ambiente (Environment) donde se guardan los objetos creados o cargados en RStudio; la historia (History) de las ejecuciones realizadas durante la sesión de RStudio; las conexiones (Connections) que se pueden realizar con bases de datos (Oracle, SQL, Salesforce, Spark, Hipe, entre otros); tutoriales (tutorial) precargados usando shiny para el uso básico de R y RStudio.\n\nFIGURA 1.4: Panel Gráfico +. Contiene las pestañas: archivos (Files) para visualizar los archivos de la carpeta de trabajo actual (definida como la carpeta “documentos” por defecto); la pestaña de visualización de gráficos estáticos (Plots); pestaña de instalación y actualización de paquetes (Packages); la pestaña de ayuda (Help); y el visualizador (Viewer) de gráficos animados, gráficos 3D, objetos HTML.\n\nFIGURA 1.5: Barra de opciones rápidas.\n\nFIGURA 1.6: Barra de menús. De las pestañas más importantes: File nos permite crear o cargar archivos; Session, definir espacio de trabajo actual; y Tools, ingresar las configuraciones de RStudio. Usos más avanzados, como la depuración de código o el uso de versiones de control (Git), también se manejan desde las opciones de esta barra.\n","code":""},{"path":"introducción-a-r-básico.html","id":"tipos-de-documentos-en-rstudio","chapter":"Capítulo 1 Introducción a R básico","heading":"1.3 Tipos de documentos en RStudio","text":"Luego de conocer los paneles de RStudio, es necesario crear los espacios donde se escribirán las órdenes modo de código. Estos documentos, como cualquier editor de texto, se pueden guardar o compartir, por ejemplo, mediante un correo electrónico.","code":""},{"path":"introducción-a-r-básico.html","id":"r-script-.r","chapter":"Capítulo 1 Introducción a R básico","heading":"1.3.1 R Script (.R)","text":"Es el documento más simple donde puedo escribir R. Es un editor de texto como el bloc de notas de cualquier sistema operativo. obstante, este editor lee y colorea la sintaxis especial del código de R. Esto permite identificar cada parte del código según lo que sea: una variable, una función, un número, un texto, símbolos especiales, operadores, entre otros; simplificando enormemente la lectura del código y el aprendizaje de R.\nFIGURA 1.7: Procedimiento para abrir un documento de RScript usando el menú File/ New File/ R script.\n\nFIGURA 1.8: Apariencia de un R script con código. Notar los colores diferenciales para cada parte del código.\n","code":""},{"path":"introducción-a-r-básico.html","id":"r-markdown-.rmd","chapter":"Capítulo 1 Introducción a R básico","heading":"1.3.2 R Markdown (.Rmd)","text":"Es un formato de archivo para la creación de documentos dinámicos. Estos pueden ser: páginas web, aplicaciones shiny, diapositivas, o cualquier tipo de reporte que puede ser exportado en formato .docx, .pdf o .html. Utiliza la sintaxis de Markdown pero posibilitando la inclusión de “pedacitos de código”, la traducción literal de code chunk. Los chunk se comportan como pequeños R scripts embebidos en el documento de texto plano escrito con sintaxis Markdown.Suena extremadamente complejo el decir “sintaxis Markdown”, pero lo es. Una vez uno sabe utilizar R, aprender Markdown resulta sencillo. Puedes aprender utilizar R Markdown con el libro en línea R Markdown: Definitive Guide en su versión de 2018, o el más actualizado R Markdown Cookbook de 2020. Ambos libros han sido escritos en colaboración de Yihui Xie, uno de las mentes brillantes de RStudio y quien le debemos el uso de documentos dinámicos en RStudio.se profundizará en el uso de R Markdown, dado que es el objetivo del programa, pero se utilizará frecuentemente durante las clases. Si eres un estudiante que ha está llevando el programa, podrás siempre utilizar tanto R script como R Markdown para ejecutar tus códigos. Se recomienda fuertemente comenzar utilizar este último dada la ventaja de permitir hacer anotaciones de texto plano como en cualquier editor de texto común.\nFIGURA 1.9: Procedimiento para abrir un documento de R Markdown usando el menú File/ New File/ R Markdown....\n\nFIGURA 1.10: Ventana emergente para darle nombre al documento R Markdown.\n\nFIGURA 1.11: Aparecerá un archivo R Markdown con texto de ejemplo para que tengamos una idea de qué se puede hacer con él.\n\nFIGURA 1.12: knit es una función del paquete knitr, desarrollado por Yihui Xie y colaboradores, para la generación de reportes dinámicos con R Markdown. Haciendo clic en el botón se despliega la lista de posibles exportaciones del documento. La exportación Knit HTML produce una página web de reporte.\n\nFIGURA 1.13: Tras hacer clic en Knit HTML, será necesario guardar en el almacenamiento de la computadora el documento, cuya extensión es .Rmd.\n\nFIGURA 1.14: En la consola, o en una pestaña Render, comenzará mostrarse la ejecución del código que knit desplegó para exportar el R Markdown página web HTML.\n\nFIGURA 1.15: Vista del archivo HTML generado partir del R Markdown de ejemplo.\n","code":""},{"path":"introducción-a-r-básico.html","id":"ejecutar-código","chapter":"Capítulo 1 Introducción a R básico","heading":"1.4 Ejecutar código","text":"¿Alguna vez hiciste un histograma de frecuencias?. Hacer uno de manera exploratoria es muy sencillo en R. El siguiente código hará dos cosas en un solo paso:Creará un conjunto de 10,000 datos aleatorios que siguen en la distribución normal.Generará el gráfico del histograma de frecuencias utilizando el conjunto previamente creado.Por ahora se ahondará en el detalle de qué cosa es rnorm() o hist().Para replicarlo, es necesario escribir el código exacto, para luego dar la orden, es decir, ejecutar el código. La ejecución se hace presionando en el teclado de tu computador control + enter o command + enter (usuarios macOS).Existen otros atajos de teclado para ejecuciones especiales.Ejecutar todas las líneas de código del script: control (o command) + shift + enter.Ejecutar desde el inicio del script hasta la línea actual: control (o command) + Alt + B.Ejecutar desde la línea actual hasta el final del script: control (o command) + Alt + E.Una pregunta que siempre genera confusión es la presencia de unos corchetes [1] en los resultados vistos tanto en consola como en este libro. Esto es parte de un resultado por si mismo, es la posición del elemento mostrado justo la derecha del corchete.Si se ejecuta el símbolo : entre dos números, R generará el rango de valores enteros entre dichos números, incluyéndolos.El resultado muestra los confusos [] la izquierda del primer elemento de cada fila del conjunto de datos resultante, indicando su posición dentro de la secuencia de elementos.","code":"\nhist(rnorm(10000))\n1:100##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n##  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n##  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n##  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n##  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n##  [91]  91  92  93  94  95  96  97  98  99 100"},{"path":"introducción-a-r-básico.html","id":"operaciones-aritméticas","chapter":"Capítulo 1 Introducción a R básico","heading":"1.5 Operaciones aritméticas","text":"Como ya se había mencionado antes, R nos permite operar con código. La cosa más sencilla para hacer en R es sumar.TABLA 1.1: Operaciones (símbolos) aritméticas en R","code":"\n10 + 10## [1] 20"},{"path":"introducción-a-r-básico.html","id":"funciones-matemáticas","chapter":"Capítulo 1 Introducción a R básico","heading":"1.6 Funciones matemáticas","text":"Operaciones más complejas necesitan el uso de funciones. Estas son “secuencias de ordenes empaquetadas con un nombre pequeño y recordable” — la información sobre las funciones será desarrollada más adelante (sección 2.2). En la siguiente tabla se presentan las funciones matemáticas más comunes en R:TABLA 1.2: Operaciones matemáticas en R. Estos procedimientos matemáticos vienen predefinidos como ordenes denominadas “Funciones”","code":""},{"path":"introducción-a-r-básico.html","id":"comentar-el-código","chapter":"Capítulo 1 Introducción a R básico","heading":"1.7 Comentar el código","text":"Una forma de asegurar que en el futuro el código escrito sea entendible, incluso por nosotros mismos, es comentándolo. Dejar comentarios nos ayudará recordar la intención con la que se escribió una sección determinada de los comandos.Para comentar en R, se requiere colocar el símbolo # la izquierda del texto ser considerado comentario.Como queda en evidencia, importa si el comentario está en solitario en una línea de código, o si está la derecha de algo que sí se quiere ejecutar. Esto afecta el resultado de la operación.","code":"\n# Esta es una suma \n2 + 2 ## [1] 4\n10 * 2 # + 3029## [1] 20"},{"path":"variables-y-funciones.html","id":"variables-y-funciones","chapter":"Capítulo 2 Variables y funciones","heading":"Capítulo 2 Variables y funciones","text":"","code":""},{"path":"variables-y-funciones.html","id":"qué-aprenderás","chapter":"Capítulo 2 Variables y funciones","heading":"2.1 ¿Qué aprenderás?","text":"Es la","code":""},{"path":"variables-y-funciones.html","id":"creación-de-variables","chapter":"Capítulo 2 Variables y funciones","heading":"2.2 Creación de Variables","text":"Las variables son espacios virtuales, que puede contener de elementos o estar vacíos. Imagina que en una tabla de datos es un objeto “contenedor de mediciones” de un trabajo de investigación. Dicha tabla puede ser considerada una variable u objeto en R. Más adelante se hablará sobre los tipos de variables que existen en R.Una forma sencilla de comenzar con variables es guardar un valor numérica en la memoria de trabajo de RStudio, también llamado ambiente (pestaña Environment). En este sentido, se necesita asignar el contenido un nombre para que RStudio lo “recuerde”, haciendo uso de un operador de asignación <-. Para crear una variable llamada NUM conteniendo el número 2022.Si se desea ver el contenido de una variable previamente guardada en el ambiente, basta con ejecutar el nombre d ela variable:o usar la función print() para imprimirla en la consola:Una versión frecuentemente usada en ejemplos de R, involucra colocar la asignación entre paréntesis para que hacer dos cosas la vez: guardar la variable en el ambiente y mostrar su contenido en la consola.Existe la posibilidad de asignar con un operador de asignación inverso ->. Toma en cuenta qué debe ir en la cola (contenido) y en la cabeza (nombre) del operador. En otras palabras, la “flecha” que se forma con este operador siempre apunta al futuro nombre de la variable. Recuerda, la variable existe hasta que se ejecute y aparezca dicho nombre en el ambiente de RStudio.El símbolo = también funciona, pero, por convención, este se debe usar para crear variables. Se usará dentro de las funciones para “asignar” contenido los argumentos de las mismas (se explicará continuación).es posible continuar hablando de variables sin antes hacer una introducción las funciones en R.","code":"\nNUM <- 2022\nNUM## [1] 2022\nprint(NUM)## [1] 2022\n(NUM <- 2022)## [1] 2022\n# Operador de asignación inverso\n2022 -> NUM\n# Mal uso del símbolo =\nNUM = 2022\n\n# Buen uso del símbolo = : siempre dentro de una función.\n# Calcular el logaritmo en base 2 de 10\nbs <- 2 + 8\nlog(10, base = bs)## [1] 1"},{"path":"variables-y-funciones.html","id":"funciones","chapter":"Capítulo 2 Variables y funciones","heading":"2.3 Funciones","text":"","code":""},{"path":"variables-y-funciones.html","id":"qué-son-las-funciones","chapter":"Capítulo 2 Variables y funciones","heading":"2.3.1 ¿Qué son las funciones?","text":"Se puede idealizar una función como una secuencia de órdenes (líneas de código) que tienen como objetivo aplicarle un procedimiento (gráfico, estadístico, de modificación o transformación, entre otros) un objeto de entrada (input) para generar un resultado (ouput). Dichas líneas de código están empaquetadas y almacenadas con un nombre.Reconocer una función en R es tarea sencilla, siempre será un nombre seguido de paréntesis. Por ejemplo, la función para calcular la desviación estándar de un conjunto de datos es sd(), que proviene del inglés standard deviation. Dentro de los paréntesis se deben colocar los argumentos de la función. El argumento más sencillo que algunas funciones necesitan es un conjunto de datos, y es justamente lo único que necesita sd().Si se ejecuta únicamente el nombre de una función existente en RStudio, en la consola se mostrará el contenido de la misma, la secuencia de órdenes que le dan forma la función. Ejecuta el sd para ver su contenido:La secuencia de órdenes dentro de sd es corta. Básicamente utiliza la función sqrt() para sacarle la raíz cuadrada la función var(), esta última calcula la varianza de un conjunto de datos. La estructura del código es propiamente la fórmula matemática para el cálculo de la desviación estándar. Aunque, decir verdades, el código luce más complejo, y es debido que aquí la función var() contiene argumentos condicionales para pedir que evalúe si el objeto x es correcto para la función, o si se necesita un cambio antes de procesarx en sd(). Pierde cuidado si se entiende mucho por ahora, es necesario comprender las funciones este nivel al iniciar con R.","code":"\n# Para crear un conjunto de datos en R se usa la función c()\nx <- c(7,9,3,4,5,3,7,8)\n\n# Usando sd() para hallar la desviación estándar de x\nsd(x)## [1] 2.31455\nsd## function (x, na.rm = FALSE) \n## sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n##     na.rm = na.rm))\n## <bytecode: 0x0000000018193310>\n## <environment: namespace:stats>"},{"path":"variables-y-funciones.html","id":"creación-de-funciones","chapter":"Capítulo 2 Variables y funciones","heading":"2.3.2 Creación de funciones","text":"La gran comunidad de desarrollo detrás de R ha creado una infinidad de funciones, almacenados en los miles de paquetes, o librerías, disponibles en el repositorio oficial CRAN y otras fuentes (ver sección Librerías y repositorios. obstante, algunas veces se necesita crear funciones personalizadas los requerimientos del usuario.Cuando se detecta que algunas secuencias de órdenes se suelen repetir en el código, crear una función que empaquete dicha secuencia permitirá\nautomatizar procedimientos y simplificar el código. Como regla general, si copias y pegas una secuencia de órdenes para usarla más de 2 veces, ya se debería pensar en crear una función que compile la tarea.Crear un función involucra los siguientes pasos:Darle un nombre. Crear una función es como crear una variable: hay que asignarle un contenido un nombre.Luego de escribir el nombre, se tiene que usar la función llamada function()para indicar qué argumentos tendrá la nueva función.Definir el contenido de la función, la secuencia de órdenes, dentro de corchetes. Dentro de ellos se usarán los argumentos establecidos en function().\nPara crear una función que le sume 100 un número, se puede usar:Para recrear la famosa función de Carl Friedrich Gauss para calcular la suma de todos los números dentro de un rango numérico, usaremos la fórmula matemática:\\[ k = \\frac{n * ( n + 1 )}{2} \\]Adicionalmente, se puede predefinir valores por defecto en function(), mismos que se podrán modificar al usar la función ya creada.Como es notorio, se pueden crear variables dentro de una función, pero estas serán temporales. Una vez se imprime el resultado en consola, la variable desaparece. Para que algún paso realizado dentro de la función se guarde como una variable permanentemente en el ambiente, usa el símbolo especial <<-.","code":"\n# Esta función admitirá como objeto de entrada un \n# valor x, definido en function(), para sumarle 100\nmi.fun <- function(x){\n  x+100\n}\n\n# Usando mi.fun() con 10\nmi.fun(10)## [1] 110\nk.Gauss <- function(n) {\n  (n * (n+1))/2\n}\n\nk.Gauss(100)## [1] 5050\n# Esta función hallará el logaritmo con base 2 \n# (por defecto) de la función matemática de Gauss\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <- (n * (n+1))/2\n  logaritmo <- log(resultado.Gauss, base=base)\n  print(logaritmo)\n}\n\n# Aplicando la función al valor 100\nlog.Gauss(100)## [1] 12.30207\n# Se guardará resultado.Gauss en la consola\nlog.Gauss <- function(n, base = 2) {\n  resultado.Gauss <<- (n * (n+1))/2\n  logaritmo <- log(resultado.Gauss, base=base)\n  print(logaritmo)\n}\n\n# Aplicando la función al valor 100\nlog.Gauss(100)## [1] 12.30207\n# Mostrando el objeto que se creó automáticamente\n# en el ambiente tras ejecutar log.Gauss()\nprint(resultado.Gauss)## [1] 5050"},{"path":"variables-y-funciones.html","id":"clasificación-de-variables","chapter":"Capítulo 2 Variables y funciones","heading":"2.4 Clasificación de variables","text":"Toda variable cuenta con dos atributos: clase y estructura. Para entender cómo se almacenan los datos en R, se necesita conocerlas detalle.\nFIGURA 1.15: Analogía del gato en la caja para entender las variables. Aquí, el gato es el contenido; la caja, la estructura. Esta “variable” puede ser de la clase “contenedora de gatos” y estructura “cartón”. Así mismo, habrán variables contenedoras de números, de caracteres, de valores lógicos, y estos estarán ordenados de diferente manera.\n","code":""},{"path":"variables-y-funciones.html","id":"clases-atómicas","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.1 Clases atómicas","text":"Según su contenido, en R existen seis clases básicas (o atómicas) de variables:tipo lógica: identificado con el nombre logicaltipo caracter o texto: identificado con el nombre charactertipo número con decimales: conocidos como doubles, identificado con el nombre numerictipo número entero: identificado con el nombre integertipo número complejo: identificado con el nombre complextipo crudo o en bits: identificado con el nombre rawDe estos, los últimos tres serán utilizando lo largo de este libro. Quizá surja la pregunta de por qué usar números enteros. En realidad una variable del tipo numeric ya incluye enteros y con decimales (es decir, todos los números reales). Para efectos de una gran cantidad de funciones estadísticas, en R es relevante brindarle números enteros como integer, o diferenciarlos de numeric.","code":""},{"path":"variables-y-funciones.html","id":"vectores","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.2 Vectores","text":"","code":""},{"path":"variables-y-funciones.html","id":"factores","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.3 Factores","text":"","code":""},{"path":"variables-y-funciones.html","id":"listas","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.4 Listas","text":"","code":""},{"path":"variables-y-funciones.html","id":"matrices","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.5 Matrices","text":"","code":""},{"path":"variables-y-funciones.html","id":"data-frames","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.6 Data Frames","text":"","code":""},{"path":"variables-y-funciones.html","id":"tibbles","chapter":"Capítulo 2 Variables y funciones","heading":"2.4.7 Tibbles","text":"","code":""},{"path":"variables-y-funciones.html","id":"indexación-de-variables","chapter":"Capítulo 2 Variables y funciones","heading":"2.5 Indexación de variables","text":"","code":""},{"path":"variables-y-funciones.html","id":"indexación-en-variables-de-una-dimensión","chapter":"Capítulo 2 Variables y funciones","heading":"2.5.1 Indexación en variables de una dimensión","text":"","code":""},{"path":"variables-y-funciones.html","id":"indexación-en-variables-de-dos-dimensiones","chapter":"Capítulo 2 Variables y funciones","heading":"2.5.2 Indexación en variables de dos dimensiones","text":"","code":""},{"path":"variables-y-funciones.html","id":"indexación-en-listas","chapter":"Capítulo 2 Variables y funciones","heading":"2.5.3 Indexación en listas","text":"","code":""},{"path":"tópicos-básicos-adicionales.html","id":"tópicos-básicos-adicionales","chapter":"Capítulo 3 Tópicos básicos adicionales","heading":"Capítulo 3 Tópicos básicos adicionales","text":"","code":""},{"path":"tópicos-básicos-adicionales.html","id":"operadores-lógicos","chapter":"Capítulo 3 Tópicos básicos adicionales","heading":"3.1 Operadores lógicos","text":"","code":""},{"path":"tópicos-básicos-adicionales.html","id":"librerías-y-repositorios","chapter":"Capítulo 3 Tópicos básicos adicionales","heading":"3.2 Librerías y repositorios","text":"","code":""},{"path":"tópicos-básicos-adicionales.html","id":"pedir-ayuda-en-rstudio","chapter":"Capítulo 3 Tópicos básicos adicionales","heading":"3.3 Pedir ayuda en RStudio","text":"","code":""},{"path":"tópicos-básicos-adicionales.html","id":"limpieza-de-datos-valores-perdidos","chapter":"Capítulo 3 Tópicos básicos adicionales","heading":"3.4 Limpieza de datos: valores perdidos","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"flujos-de-trabajo-con-tidyverse","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"Capítulo 4 Flujos de trabajo con tidyverse","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"pipe","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.1 Pipe","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"tablas-anchas-y-largas","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.2 Tablas anchas y largas","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"filtrado","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.3 Filtrado","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"selección","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.4 Selección","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"agrupamiento-reordenamiento-y-conteo","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.5 Agrupamiento, Reordenamiento y conteo","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"transformación-y-creación-de-columnas","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.6 Transformación y creación de columnas","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"resúmenes-estadísticos","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.7 Resúmenes estadísticos","text":"","code":""},{"path":"flujos-de-trabajo-con-tidyverse.html","id":"combinar-bases-de-datos","chapter":"Capítulo 4 Flujos de trabajo con tidyverse","heading":"4.8 Combinar bases de datos","text":"","code":""},{"path":"probabilidades.html","id":"probabilidades","chapter":"Capítulo 5 Probabilidades","heading":"Capítulo 5 Probabilidades","text":"","code":""},{"path":"estadística-descriptiva.html","id":"estadística-descriptiva","chapter":"Capítulo 6 Estadística descriptiva","heading":"Capítulo 6 Estadística descriptiva","text":"","code":""},{"path":"test-de-normalidad.html","id":"test-de-normalidad","chapter":"Capítulo 7 Test de normalidad","heading":"Capítulo 7 Test de normalidad","text":"","code":""},{"path":"test-de-comparaciones-de-grupos.html","id":"test-de-comparaciones-de-grupos","chapter":"Capítulo 8 Test de comparaciones de grupos","heading":"Capítulo 8 Test de comparaciones de grupos","text":"","code":""},{"path":"introducción-a-los-modelos-lineales.html","id":"introducción-a-los-modelos-lineales","chapter":"Capítulo 9 Introducción a los modelos lineales","heading":"Capítulo 9 Introducción a los modelos lineales","text":"","code":""},{"path":"correlaciones.html","id":"correlaciones","chapter":"Capítulo 10 Correlaciones","heading":"Capítulo 10 Correlaciones","text":"","code":""},{"path":"análisis-de-varianza.html","id":"análisis-de-varianza","chapter":"Capítulo 11 Análisis de varianza","heading":"Capítulo 11 Análisis de varianza","text":"","code":""},{"path":"análosis-de-poder.html","id":"análosis-de-poder","chapter":"Capítulo 12 Análosis de poder","heading":"Capítulo 12 Análosis de poder","text":"","code":""},{"path":"probabilidades-1.html","id":"probabilidades-1","chapter":"Capítulo 13 Probabilidades","heading":"Capítulo 13 Probabilidades","text":"","code":""},{"path":"estadística-descriptiva-1.html","id":"estadística-descriptiva-1","chapter":"Capítulo 14 Estadística descriptiva","heading":"Capítulo 14 Estadística descriptiva","text":"","code":""},{"path":"test-de-normalidad-1.html","id":"test-de-normalidad-1","chapter":"Capítulo 15 Test de normalidad","heading":"Capítulo 15 Test de normalidad","text":"","code":""},{"path":"test-de-comparaciones-de-grupos-1.html","id":"test-de-comparaciones-de-grupos-1","chapter":"Capítulo 16 Test de comparaciones de grupos","heading":"Capítulo 16 Test de comparaciones de grupos","text":"","code":""},{"path":"introducción-a-los-modelos-lineales-1.html","id":"introducción-a-los-modelos-lineales-1","chapter":"Capítulo 17 Introducción a los modelos lineales","heading":"Capítulo 17 Introducción a los modelos lineales","text":"","code":""},{"path":"correlaciones-1.html","id":"correlaciones-1","chapter":"Capítulo 18 Correlaciones","heading":"Capítulo 18 Correlaciones","text":"","code":""},{"path":"análisis-de-varianza-1.html","id":"análisis-de-varianza-1","chapter":"Capítulo 19 Análisis de varianza","heading":"Capítulo 19 Análisis de varianza","text":"","code":""},{"path":"análisis-de-poder.html","id":"análisis-de-poder","chapter":"Capítulo 20 Análisis de poder","heading":"Capítulo 20 Análisis de poder","text":"","code":""},{"path":"regresión-lineal-clásica-lm.html","id":"regresión-lineal-clásica-lm","chapter":"Capítulo 21 Regresión lineal clásica (LM)","heading":"Capítulo 21 Regresión lineal clásica (LM)","text":"","code":""},{"path":"regresión-lineal-clásica-lm.html","id":"mínimos-cuadrados-y-máxima-verosimilitud","chapter":"Capítulo 21 Regresión lineal clásica (LM)","heading":"21.1 Mínimos cuadrados y máxima verosimilitud","text":"","code":""},{"path":"regresión-lineal-clásica-lm.html","id":"propiedades-de-los-estimadores","chapter":"Capítulo 21 Regresión lineal clásica (LM)","heading":"21.2 Propiedades de los estimadores","text":"","code":""},{"path":"regresión-lineal-clásica-lm.html","id":"regresión-lineal-múltiple","chapter":"Capítulo 21 Regresión lineal clásica (LM)","heading":"21.3 Regresión lineal múltiple","text":"","code":""},{"path":"regresión-lineal-clásica-lm.html","id":"selección-de-modelos","chapter":"Capítulo 21 Regresión lineal clásica (LM)","heading":"21.4 Selección de modelos","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"modelos-lineales-generalizados-glm","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"Capítulo 22 Modelos lineales generalizados (GLM)","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"logística","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.1 Logística","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"binomial","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.2 Binomial","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"poisson","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.3 Poisson","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"binomial-negativa","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.4 Binomial Negativa","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"hurdle-y-zero-inflados","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.5 Hurdle y Zero inflados","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"weibull","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.6 Weibull","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"gamma","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.7 Gamma","text":"","code":""},{"path":"modelos-lineales-generalizados-glm.html","id":"beta","chapter":"Capítulo 22 Modelos lineales generalizados (GLM)","heading":"22.8 Beta","text":"","code":""},{"path":"modelos-de-efectos-mixtos-clásica-lmm-y-generalizados-glmm.html","id":"modelos-de-efectos-mixtos-clásica-lmm-y-generalizados-glmm","chapter":"Capítulo 23 Modelos de efectos mixtos: clásica (LMM) y generalizados (GLMM)","heading":"Capítulo 23 Modelos de efectos mixtos: clásica (LMM) y generalizados (GLMM)","text":"","code":""},{"path":"métodos-interdependientes.html","id":"métodos-interdependientes","chapter":"Capítulo 24 Métodos interdependientes","heading":"Capítulo 24 Métodos interdependientes","text":"","code":""},{"path":"métodos-interdependientes.html","id":"clustering-jerárquico","chapter":"Capítulo 24 Métodos interdependientes","heading":"24.1 Clustering jerárquico","text":"","code":""},{"path":"métodos-interdependientes.html","id":"clustering-no-jerárquico","chapter":"Capítulo 24 Métodos interdependientes","heading":"24.2 Clustering no jerárquico","text":"","code":""},{"path":"métodos-interdependientes.html","id":"análisis-de-componentes-principales-pca","chapter":"Capítulo 24 Métodos interdependientes","heading":"24.3 Análisis de componentes principales (PCA)","text":"","code":""},{"path":"métodos-interdependientes.html","id":"análisis-de-coordenadas-principales-mds","chapter":"Capítulo 24 Métodos interdependientes","heading":"24.4 Análisis de coordenadas principales (MDS)","text":"","code":""},{"path":"métodos-interdependientes.html","id":"escalamiento-multidimensional-no-métrico-nmds","chapter":"Capítulo 24 Métodos interdependientes","heading":"24.5 Escalamiento multidimensional no métrico (NMDS)","text":"","code":""},{"path":"métodos-canónicos.html","id":"métodos-canónicos","chapter":"Capítulo 25 Métodos Canónicos","heading":"Capítulo 25 Métodos Canónicos","text":"","code":""},{"path":"métodos-canónicos.html","id":"análisis-de-correspondencia-canónica-cca","chapter":"Capítulo 25 Métodos Canónicos","heading":"25.1 Análisis de correspondencia canónica (CCA)","text":"","code":""},{"path":"métodos-canónicos.html","id":"análisis-de-redundancia-rda","chapter":"Capítulo 25 Métodos Canónicos","heading":"25.2 Análisis de redundancia (RDA)","text":"","code":""},{"path":"métodos-canónicos.html","id":"análisis-discriminante-lda-qda","chapter":"Capítulo 25 Métodos Canónicos","heading":"25.3 Análisis discriminante (LDA, QDA)","text":"","code":""},{"path":"métodos-canónicos.html","id":"análisis-de-multiples-factores-mfa","chapter":"Capítulo 25 Métodos Canónicos","heading":"25.4 Análisis de Multiples Factores (MFA)","text":"","code":""}]
