[["index.html", "Estadística y Análisis de Datos para Ciencias, con Aplicaciones en R Bienvenida", " Estadística y Análisis de Datos para Ciencias, con Aplicaciones en R Irwing S. Saldaña 2022-01-13 Bienvenida Esta es la versión en página web del libro Estadística y Análisis de Datos para Ciencias, con Aplicaciones en R, publicado por el OpenScience, el Fondo Editorial del Instituto de Ciencias Antonio Brack. Esta página web contiene el manuscrito completo del autor antes de la edición final de su publicación en PDF. Si desea solicitar una copia del libro electrónico, puede hacerlo a través de Amazon, Google Play o el propio Fondo Editorial del Instituto. Este libro está desarrollado en base al programa Data Science: Estadística y Análisis de Datos con R, un conglomerado de cinco cursos dictados en el ´Instituto de Ciencias Antonio Brack a través de la plataforma educativa online masterX. De igual manera, el libro sirve de soporte tanto para los estudiantes del programa o para aquellos que busquen un libro de referencia con el cual seguir sus estudios autodidactas. Este libro ha sido completamente escrito en R Markdown, utilizando RStudio. Si tienes alguna sugerencia, o detectas algún fallo ortográfico, o error de forma o de fondo, por favor enviar un mensaje a isaldanau@gmail.com con el asunto de correo Corrección Libro Estadística . Esta página web es de libre uso dentro de los términos autorizados bajo la Licencia Internacional Reconocimiento No Comercial - Sin Derivadas 4.0. Además, esta obra utiliza un Código de conducta para colaboradores. Al contribuir a este libro, acepta cumplir sus términos. Finalmente, esta obra está alojada en Netlify, con código abierto disponible en Github. "],["prefacio.html", "Prefacio ", " Prefacio "],["por-qué-r-para-estadística.html", "¿Por qué R para estadística?", " ¿Por qué R para estadística? La estadística está presente en casi todas las ciencias. Tanto seas un científico, un analista, un médico, un consultor de biodiversidad, un ingeniero, un psicólogo, o un estudiante universitario, saber cómo analizar datos te abrirá muchas puertas a oportunidades grandiosas. En este sentido, la programación a arribado para quedarse en distintos campos de las ciencias. Inclusive, muchos expertos a nivel mundial están de acuerdo con que el no saber programar es el nuevo analfabetismo del futuro que parece ya ser del ahora (e.g. un post de Harvard University). En este nuevo paradigma, los profesionales estamos inmersos en la necesidad de actualizar nuestro bagaje de conocimentos, incluyendo al menos un lenguaje de programación orientado a sus necesidades académicas, de investigación o educativas. Diversos lenguajes de programación son atractivos para investigadores y profesionales, pero ninguno esta tan orientado al desarrollo estadístico como R. Otras opciones populares son Python, MATLAB, C, C++, JavaScript, SQL, Scala, Julia, SAS. R es uno de los lenguajes más populares para ciencia de datos, siendo considerado uno de los más sencillos de aprender. R ofrece un gran ambiente para desarrollo estadístico y gráfico. Con él se puede desarrollar con simpleza estadística, ciencia de datos, big dada, machine learning, y actualmente, gracias a la vinculación con python a través de la librería reticulate y a la adaptación de librerías de Python a R , es posible aplicar con más soltura procedimientos tan complejos como el deep learning. Entre las cosas más interesantes de R se encuentra la amplia comunidad de desarrollo que lo respalda, con paquetes y soporte técnico libre y abierto en plataformas como StackOverflow, RStudio Community, R-Bloggers, además de repositorios en la nube como GitHub, GitLab o Bioconductor. "],["a-quién-está-dirigido-este-libro.html", "¿A quién está dirigido este libro?", " ¿A quién está dirigido este libro? Este libro está dedicado a llevarte desde cero en el manejo del lenguaje de programación R, y su posterior aplicación en tópicos estadísticos también a partir de nivel básico. Los capítulos de este libro están diseñados para ser independientes entre sí. Siéntete libre de saltar entre los capítulos y seleccionar aquellos que sean de tu interés en el momento. La progresión temática está adaptada a la secuencia del programa de cinco cursos Data Science: Estadística y Análisis de Datos en R, ofrecido por el autor del libro, Irwing S. Saldaña, a través del Instituto de Ciencias Antonio Brack. El programa comenzó a ser dictado en 2020, y ha recibido a estudiantes de diferentes partes de Latinoamérica, El Caribe y España, así como de diversos perfiles profesionales. Entre ellos: biólogos, médicos y otros profesionales de la salud, ingenieros, psicólogos, entre otros; además, profesionales de otras ramas no tan afines a las ciencias, como economistas, tecnólogos o especialistas en finanzas, que vieron en el programa una oportunidad de ampliar su gama de herramientas de análisis estadístico y poder aplicar novedosos métodos a sus propias áreas de investigación. "],["agradecimientos.html", "Agradecimientos", " Agradecimientos FALTA "],["prerrequisitos.html", "Prerrequisitos", " Prerrequisitos El desarrollo del libro es independiente del sistema operativo que maneja el estudiante. No obstante, hay ciertas incompatibilidades o dificultades de uso para algunos pocos paquetes con Linux y macOS que en su momento serán comentados. La ejecución de todos los códigos del libro se han realizado utilizando el sistema operativo Windows 11. Se sugiere el uso del entorno RStudio por la versatilidad de uso, pero puedes usar el editor de código de tu preferencia. Se deberá utilizar las versiones listadas (o posteriores) de los programas siguientes según el sistema operativo recomendado: Para windows: R version 4.1.2 (2021-11-01)  Bird Hippie Descarga RStudio Desktop 2021.09.1+372 Descarga Rtools4.0 Descarga Para macOS: R version 4.1.2 (2021-11-01)  Bird Hippie Descarga RStudio Desktop 2021.09.1+372 Descarga XQuartz 2.8.1. Descarga Requerimientos mínimos del sistema para ejecutar RStudio: Procesadores de 2 núcleos (equivalente a Intel® Core i3 o AMD Ryzen 3). 4 Gb RAM. Espacio en almacenamiento de 100 Gb. Requerimientos recomendados del sistema para ejecutar RStudio: Procesadores de 4 a más núcleos (equivalente a Intel® Core i5 a más o AMD Ryzen 5 a más). 8 a más Gb RAM. Más de 100 Gb de espacio de almacenamiento. Librerías y bases de datos a utilizar en el libro Se ha creado un paquete de acompañamiento de este libro, el que se debe instalar ejecutándo el código siguiente. Si no conoces como ejecutar código, puedes revisar la sección Ejecutar código. El paso a paso será: Abrir RStudio. En el teclado presionar: Control + shift + N o Command + shift + N. Esto creará un nuevo R script (para más información, revisa: Tipos de documentos en RStudio). Copiar en el R script el código mostrado a continuación. # Instalar la librería del libro remotes::install_github(&quot;irwingss/rBrack&quot;) # Activar la librería libraries(rBrack) # Ejecutar las funciones instalar_paquetes_cran() instalar_paquetes_github() # Actualizar las librerías update.packages(ask = FALSE) Ejecutar el código (para más información, revisa: Ejecutar código) hasta la función instalar_paquetes_github(). Una vez estén todas las librerías instaladas, se debe ejecutar la última función update.packages() para actualizar las que se encuentren desactualizadas. "],["introducción-a-r.html", "Capítulo 1 Introducción a R", " Capítulo 1 Introducción a R Esta primera sección está enteramente dedicada al desarrollo, manejo y comprensión del lenguaje de programación R (en adelante: R) en nivel básico. Se asume que se tienen instalados y configurados los programas R, RStudio y algún otro programa de soporte para el manejo de paquetes. Si no cuentas con ninguno en tu computadora, visita la sección Prerequisitos. "],["qué-aprenderás.html", "1.1 ¿Qué aprenderás?", " 1.1 ¿Qué aprenderás? Una ventaja de los lenguajes de programación es que nos permiten definir una secuencia de análisis adaptada específicamente a nuestro requerimiento analítico. El flujo de trabajo completo queda escrito en el código, y puede ser compartida con colegas cuando se necesite en trabajos colaborativos. Pero antes de aprender sobre los métodos analíticos, se necesita hablar bien el lenguaje R. Aprenderás a trabajar con el código básico en R, a crear variables, funciones, además de utilizar tidyverse para manejo y limpieza de bases de datos. Es esencial manejar estos conceptos antes de trabajar con estadística en R. "],["primer-contacto-con-r.html", "1.2 Primer contacto con R", " 1.2 Primer contacto con R La forma simplificada de cómo funciona R incluye: dar una orden, presionar enter para que la computadora comience a procesar la orden, y luego recibir un resultado. Eso es básicamente lo que se hace con cualquier lenguaje de programación. R es considerada como una calculadora con esteroides dado que puedes aplicar matemáticas con él; aquella ciencia sobre la que se cimentan las demás. Si puedes hacer ello, tienes las puertas abiertas a aplicar estadística, análisis de diferentes tipos, generar gráficos y todo lo que te imagines. Y pues sí, también hay cosas algo bizarras en R, como poder crear tu propio calendario o usar gatitos en tu gráfico de dispersión de puntos. A diferencia de los lenguajes humanos (idiomas), un lenguaje de programación debe estar escrito a la perfección. No hay espacio para una coma mal puesta, un paréntesis olvidado, o un nombre mal colocado. La computadora solo ejecutará la orden si todo está escrito exactamente como debe ser. Todos los ejemplos de este libro pueden ser ejecutados correctamente si los escribes tal y como es mostrado. Previo a ello, se debe haber instalado y activado las librerías a usar (para más detalle, revisa la sección Prerrequisitos). "],["paneles-de-rstudio.html", "1.3 Paneles de RStudio", " 1.3 Paneles de RStudio Existen diversos editores de código que permiten trabajar con R, pero ninguno con la versatilidad de RStudio. El programa está dividido en paneles que uno puede reorganizar a conveniencia. Más allá de la posición o el orden de los paneles, es necesario que se sepa reconocerlos por su contenido, las pestañas que contiene, entre otros. Aquí se presentan los paneles en su posición clásica, junto con algunas barras y botones que se deben conocer al iniciar con RStudio. FIGURA 1.1: Panel de Trabajo. Aquí aparecerán los archivos de trabajo de R, sean R script o R Markdown. Además, es donde aparecen las bases de datos cuando se pide visualizarlas en RStudio. FIGURA 1.2: Consola. Es el panel donde se imprimen los resultados textuales y numéricos junto con el código que los genera. FIGURA 1.3: Panel de Ambiente. Las pestañas de este panel se puede intercambiar o reposicionar a conveniencia con las del Panel Gráfico +. Aquí encontrarás: el ambiente (Environment) donde se guardan los objetos creados o cargados en RStudio; la historia (History) de las ejecuciones realizadas durante la sesión de RStudio; las conexiones (Connections) que se pueden realizar con bases de datos (Oracle, SQL, Salesforce, Spark, Hipe, entre otros); tutoriales (tutorial) precargados usando shiny para el uso básico de R y RStudio. FIGURA 1.4: Panel Gráfico +. Contiene las pestañas: archivos (Files) para visualizar los archivos de la carpeta de trabajo actual (definida como la carpeta documentos por defecto); la pestaña de visualización de gráficos estáticos (Plots); pestaña de instalación y actualización de paquetes (Packages); la pestaña de ayuda (Help); y el visualizador (Viewer) de gráficos animados, gráficos 3D, objetos HTML. FIGURA 1.5: Barra de opciones rápidas. FIGURA 1.6: Barra de menús. De las pestañas más importantes: File nos permite crear o cargar archivos; Session, definir espacio de trabajo actual; y Tools, ingresar a las configuraciones de RStudio. Usos más avanzados, como la depuración de código o el uso de versiones de control (Git), también se manejan desde las opciones de esta barra. "],["tipos-de-documentos-en-rstudio.html", "1.4 Tipos de documentos en RStudio", " 1.4 Tipos de documentos en RStudio Luego de conocer los paneles de RStudio, es necesario crear los espacios donde se escribirán las órdenes a modo de código. Estos documentos, como cualquier editor de texto, se pueden guardar o compartir, por ejemplo, mediante un correo electrónico. 1.4.1 R Script (.R) Es el documento más simple donde puedo escribir R. Es un editor de texto como el bloc de notas de cualquier sistema operativo. No obstante, este editor lee y colorea la sintaxis especial del código de R. Esto permite identificar cada parte del código según lo que sea: una variable, una función, un número, un texto, símbolos especiales, operadores, entre otros; simplificando enormemente la lectura del código y el aprendizaje de R. Puedes crear un R script haciendo clics (FIGURA 1.7), o utilizando el atajo de teclado Control + shift + N o Command + shift + N. FIGURA 1.7: Procedimiento para abrir un documento de RScript usando el menú File/ New File/ R script. FIGURA 1.8: Apariencia de un R script con código. Notar los colores diferenciales para cada parte del código. 1.4.2 R Markdown (.Rmd) Es un formato de archivo para la creación de documentos dinámicos. Estos pueden ser: páginas web, aplicaciones shiny, diapositivas, o cualquier tipo de reporte que puede ser exportado en formato .docx, .pdf o .html. Utiliza la sintaxis de Markdown pero posibilitando la inclusión de pedacitos de código, la traducción literal de code chunk. Los chunk se comportan como pequeños R scripts embebidos en el documento de texto plano escrito con sintaxis Markdown. Suena extremadamente complejo el decir sintaxis Markdown, pero no lo es. Una vez uno sabe utilizar R, aprender Markdown resulta sencillo. Puedes aprender a utilizar R Markdown con el libro en línea R Markdown: The Definitive Guide en su versión de 2018, o el más actualizado R Markdown Cookbook de 2020. Ambos libros han sido escritos en colaboración de Yihui Xie, uno de las mentes brillantes de RStudio y a quien le debemos el uso de documentos dinámicos en RStudio. No se profundizará en el uso de R Markdown, dado que no es el objetivo del programa, pero se utilizará frecuentemente durante las clases. Si eres un estudiante que no ha está llevando el programa, podrás siempre utilizar tanto R script como R Markdown para ejecutar tus códigos. Se recomienda fuertemente comenzar a utilizar este último dada la ventaja de permitir hacer anotaciones de texto plano como en cualquier editor de texto común. FIGURA 1.9: Procedimiento para abrir un documento de R Markdown usando el menú File/ New File/ R Markdown.... FIGURA 1.10: Ventana emergente para darle nombre al documento R Markdown. FIGURA 1.11: Aparecerá un archivo R Markdown con texto de ejemplo para que tengamos una idea de qué se puede hacer con él. FIGURA 1.12: knit es una función del paquete knitr, desarrollado por Yihui Xie y colaboradores, para la generación de reportes dinámicos con R Markdown. Haciendo clic en el botón se despliega la lista de posibles exportaciones del documento. La exportación Knit to HTML produce una página web de reporte. FIGURA 1.13: Tras hacer clic en Knit to HTML, será necesario guardar en el almacenamiento de la computadora el documento, cuya extensión es .Rmd. FIGURA 1.14: En la consola, o en una pestaña Render, comenzará a mostrarse la ejecución del código que knit desplegó para exportar el R Markdown a página web HTML. FIGURA 1.15: Vista del archivo HTML generado a partir del R Markdown de ejemplo. "],["ejecutar-código.html", "1.5 Ejecutar código", " 1.5 Ejecutar código ¿Alguna vez hiciste un histograma de frecuencias?. Hacer uno de manera exploratoria es muy sencillo en R. El siguiente código hará dos cosas en un solo paso: Creará un conjunto de 10,000 datos aleatorios que siguen en la distribución normal. Generará el gráfico del histograma de frecuencias utilizando el conjunto previamente creado. Por ahora no se ahondará en el detalle de qué cosa es rnorm() o hist(). hist(rnorm(10000)) Para replicarlo, es necesario escribir el código exacto, para luego dar la orden, es decir, ejecutar el código. La ejecución se hace presionando en el teclado de tu computador control + enter o command + enter (usuarios macOS). Existen otros atajos de teclado para ejecuciones más elaboradas, pero no es necesario que las aprendas. La esencial, es la ya explicada: Ejecutar todas las líneas de código del script: control (o command) + shift + enter. Ejecutar desde el inicio del script hasta la línea actual: control (o command) + Alt + B. Ejecutar desde la línea actual hasta el final del script: control (o command) + Alt + E. Ejecutar varias líneas de código a la vez es tan simple como seleccionar las líneas requeridas y presionar en el teclado control + enter o command + enter. Un tema que siempre genera confusión es la presencia de unos corchetes [1] en los resultados vistos tanto en consola como en este libro. Esto no es parte de un resultado por si mismo, es la posición del elemento mostrado justo a la derecha del corchete. Si se ejecuta el símbolo : entre dos números, R generará el rango de valores enteros entre dichos números, incluyéndolos. 1:100 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 El resultado muestra los confusos [] a la izquierda del primer elemento de cada fila del conjunto de datos resultante, indicando su posición dentro de la secuencia de elementos. "],["operaciones-aritméticas.html", "1.6 Operaciones aritméticas", " 1.6 Operaciones aritméticas Como ya se había mencionado antes, R nos permite operar con código. La cosa más sencilla para hacer en R es sumar. 10 + 10 ## [1] 20 Comentario: en adelante se verá tanto el código a ejecutar (primera línea del ejemplo de suma aquí propuesto) como su resultado textual, mismo que se obtiene en la consola de RStudio (segunda línea del ejemplo). TABLA 1.1: Operaciones (símbolos) aritméticas en R Operador Operación Ejemplo Resultado + Suma 10 + 3 13.000 - Resta 10 - 3 7.000 * Multiplicación 10 * 3 30.000 / División 10 / 3 3.333 ^ Potencia 10 ^ 3 1000.000 %/% División entera (parte entera) 10 %% 3 3.000 %% Residuo de dividir un número entre otro 10 %/% 3 1.000 "],["funciones-matemáticas.html", "1.7 Funciones matemáticas", " 1.7 Funciones matemáticas Operaciones más complejas necesitan el uso de funciones. La información sobre las funciones será desarrollada más adelante (CROSSREF). No obstante, se pueden ir interpretando como secuencias de ordenes empaquetadas con un nombre pequeño y recordable. Aquí se presentan las funciones matemáticas más comunes en R. TABLA 1.2: Operaciones matemáticas en R. Estos procedimientos matemáticos vienen predefinidos como ordenes denominadas Funciones Operador Operación Ejemplo Resultado exp(n) Eleva e a la n exp(3) 20.086 sqrt(n) Raíz cuadrada de n sqrt(3) 1.732 log(n) Logaritmo natural de n log(3) 1.099 log(n, b) Logaritmo de n en base b log(3, 10) 0.477 log10(n) Logaritmo de n en base 10 log10(3) 0.477 log1p(n) Logaritmo natural de n +1 log1p(2) 1.099 log2(n) Logaritmo en base 2 log2(10) 3.322 pi Número pi pi 3.142 abs(n) Convierte n en absoluto abs(-10.2) 10.200 "],["comentar-el-código.html", "1.8 Comentar el código", " 1.8 Comentar el código Una forma de asegurar que en el futuro el código escrito sea entendible, incluso por nosotros mismos, es comentarlo. Dejar comentarios nos ayudará a recordar la intención con la que se escribió una sección del código. Para comentar en R se requiere colocar el símbolo # a la izquierda del texto a ser considerado comentario. # Esta es una suma 2 + 2 ## [1] 4 10 * 2 # + 3029 ## [1] 20 Como queda en evidencia, no importa si el comentario está en solitario en una línea de código, o si está a la derecha de algo que sí se quiere ejecutar. Esto no afecta el resultado de la operación. Comentario: en RStudio, verás que en la consola, los resultados no muestran el símbolo #. En su lugar, directamente dan el resultado esperado. "],["variables-y-funciones.html", "Capítulo 2 Variables y funciones ", " Capítulo 2 Variables y funciones "],["creación-de-variables.html", "2.1 Creación de Variables", " 2.1 Creación de Variables Las variables son espacios virtuales, que puede contener de elementos o estar vacíos. Imagina que en una tabla de datos es un objeto contenedor de mediciones de un trabajo de investigación. Dicha tabla puede ser considerada una variable u objeto en R. Más adelante se hablará sobre los tipos de variables que existen en R. Una forma sencilla de comenzar con variables es guardar un valor numérica en la memoria de trabajo de RStudio, también llamado ambiente (pestaña Environment). En este sentido, se necesita asignar el contenido a un nombre para que RStudio lo recuerde, haciendo uso de un operador de asignación &lt;-. Para crear una variable llamada NUM conteniendo el número 2022. NUM &lt;- 2022 Si se desea ver el contenido de una variable previamente guardada en el ambiente, basta con ejecutar el nombre d ela variable: NUM ## [1] 2022 o usar la función print() para imprimirla en la consola: print(NUM) ## [1] 2022 Una versión frecuentemente usada en ejemplos de R, involucra colocar a la asignación entre paréntesis para que hacer dos cosas a la vez: guardar la variable en el ambiente y mostrar su contenido en la consola. (NUM &lt;- 2022) ## [1] 2022 Existe la posibilidad de asignar con un operador de asignación inverso -&gt;. Toma en cuenta qué debe ir en la cola (contenido) y en la cabeza (nombre) del operador. En otras palabras, la flecha que se forma con este operador siempre apunta al futuro nombre de la variable. Recuerda, la variable no existe hasta que no se ejecute y aparezca dicho nombre en el ambiente de RStudio. # Operador de asignación inverso 2022 -&gt; NUM El símbolo = también funciona, pero, por convención, este no se debe usar para crear variables. Se usará dentro de las funciones para asignar contenido a los argumentos de las mismas (CROSSREF). # Mal uso del símbolo = NUM = 2022 # Buen uso del símbolo = : siempre dentro de una función. # Calcular el logaritmo en base 2 de 10 bs &lt;- 2 log(10, base = bs) ## [1] 3.321928 Comentario: en el ejemplo de arriba no es necesario guardar en el ambiente la variable bs para que sea usada posteriormente dentro de log(). Es solo una demostración que iremos aplicando más adelante con ejemplos complejos donde sí será necesario. No es posible continuar hablando de variables sin antes hacer una introducción a las funciones en R. "],["funciones.html", "2.2 Funciones", " 2.2 Funciones 2.2.1 ¿Qué son las funciones? Se puede idealizar una función como una secuencia de órdenes (líneas de código) que tienen como objetivo aplicarle un procedimiento (gráfico, estadístico, de modificación o transformación, entre otros) a un objeto de entrada (input) para generar un resultado (ouput). Dichas líneas de código están empaquetadas y almacenadas con un nombre. Reconocer una función en R es tarea sencilla, siempre será un nombre seguido de paréntesis. Por ejemplo, la función para calcular la desviación estándar de un conjunto de datos es sd(), que proviene del inglés standard deviation. Dentro de los paréntesis se deben colocar los argumentos de la función. El argumento más sencillo que algunas funciones necesitan es un conjunto de datos, y es justamente lo único que necesita sd(). # Para crear un conjunto de datos en R se usa la función c() x &lt;- c(7,9,3,4,5,3,7,8) # Usando sd() para hallar la desviación estándar de x sd(x) ## [1] 2.31455 Si se ejecuta únicamente el nombre de una función existente en RStudio, en la consola se mostrará el contenido de la misma, la secuencia de órdenes que le dan forma a la función. Ejecuta el sd para ver su contenido: sd ## function (x, na.rm = FALSE) ## sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), ## na.rm = na.rm)) ## &lt;bytecode: 0x0000000016ae7d78&gt; ## &lt;environment: namespace:stats&gt; La secuencia de órdenes dentro de sd es corta. Básicamente utiliza la función sqrt() para sacarle la raíz cuadrada a la función var(), esta última calcula la varianza de un conjunto de datos. La estructura del código es propiamente la fórmula matemática para el cálculo de la desviación estándar. Aunque, a decir verdades, el código luce más complejo, y es debido a que aquí la función var() contiene argumentos condicionales para pedir que evalúe si el objeto x es correcto para la función, o si se necesita un cambio antes de procesarx en sd(). Pierde cuidado si no se entiende mucho por ahora, no es necesario comprender las funciones a este nivel al iniciar con R. 2.2.2 Creación de funciones La gran comunidad de desarrollo detrás de R ha creado una infinidad de funciones, almacenados en los miles de paquetes, o librerías, disponibles en el repositorio oficial CRAN y otras fuentes (ver sección Librerías y repositorios. No obstante, algunas veces se necesita crear funciones personalizadas a los requerimientos del usuario. Cuando se detecta que algunas secuencias de órdenes se suelen repetir en el código, crear una función que empaquete dicha secuencia permitirá automatizar procedimientos y simplificar el código. Como regla general, si copias y pegas una secuencia de órdenes para usarla más de 2 veces, ya se debería pensar en crear una función que compile la tarea. El procedimiento para crear un función involucra los siguientes pasos: Darle un nombre. Crear una función es como crear una variable: hay que asignarle un contenido a un nombre. Luego de escribir el nombre, se tiene que usar la función llamada function()para indicar qué argumentos tendrá la nueva función. Definir el contenido de la función, la secuencia de órdenes, dentro de corchetes. Dentro de ellos se usarán los argumentos establecidos en function(). Para crear una función que le sume 100 a un número, se puede usar: # Esta función admitirá como objeto de entrada un # valor x, definido en function(), para sumarle 100 mi.fun &lt;- function(x){ x+100 } # Usando mi.fun() con 10 mi.fun(10) ## [1] 110 Para recrear la famosa función de Carl Friedrich Gauss para calcular la suma de todos los números dentro de un rango numérico, usaremos la fórmula matemática: \\[ k = \\frac{n * ( n + 1 )}{2} \\] k.Gauss &lt;- function(n) { (n * (n+1))/2 } k.Gauss(100) ## [1] 5050 Adicionalmente, se puede predefinir algunos valores por defecto en function(), mismos que se podrán modificar al usar la función ya creada. # Esta función hallará el logaritmo con base 2 # (por defecto) de la función matemática de Gauss log.Gauss &lt;- function(n, base = 2) { resultado.Gauss &lt;- (n * (n+1))/2 logaritmo &lt;- log(resultado.Gauss, base=base) print(logaritmo) } log.Gauss(100) ## [1] 12.30207 Como es notorio, se pueden crear variables dentro de una función, pero estas serán temporales. Una vez se imprime el resultado en consola, la variable desaparece. Para que algún paso realizado dentro de la función se guarde como una variable permanentemente en el ambiente, usa el símbolo especial &lt;&lt;-. # Se guardará resultado.Gauss en la consola log.Gauss &lt;- function(n, base = 2) { resultado.Gauss &lt;&lt;- (n * (n+1))/2 logaritmo &lt;- log(resultado.Gauss, base=base) print(logaritmo) } log.Gauss(100) ## [1] 12.30207 print(resultado.Gauss) ## [1] 5050 "],["clasificación-de-variables.html", "2.3 Clasificación de variables", " 2.3 Clasificación de variables Toda variable cuenta con dos atributos: Su contenido Su estructura 2.3.1 Clases atómicas Según su contenido, en R existen seis clases básicas (o atómicas) de variables: tipo lógica: identificado con el nombre logical tipo caracter o texto: identificado con el nombre character tipo número con decimales: conocidos como doubles, identificado con el nombre numeric **tipo número entero: identificado con el nombre integer tipo número complejo: identificado con el nombre complex tipo crudo o en bits: identificado con el nombre raw De estos, los últimos tres no serán utilizando a lo largo de este libro. Quizá surja la pregunta de por qué no usar números enteros. En realidad una variable del tipo numeric ya incluye enteros y con decimales (es decir, todos los números reales). Para efectos de una gran cantidad de funciones estadísticas, en R no es relevante brindarle números enteros como integer, o diferenciarlos de numeric. 2.3.2 Vectores 2.3.3 Factores 2.3.4 Listas 2.3.5 Matrices 2.3.6 Data Frames 2.3.7 Tibbles "],["indexación-de-variables.html", "2.4 Indexación de variables", " 2.4 Indexación de variables 2.4.1 Indexación en variables de una dimensión 2.4.2 Indexación en variables de dos dimensiones 2.4.3 Indexación en listas "],["tópicos-básicos-adicionales.html", "Capítulo 3 Tópicos básicos adicionales ", " Capítulo 3 Tópicos básicos adicionales "],["operadores-lógicos.html", "3.1 Operadores lógicos", " 3.1 Operadores lógicos "],["librerías-y-repositorios.html", "3.2 Librerías y repositorios", " 3.2 Librerías y repositorios "],["pedir-ayuda-en-rstudio.html", "3.3 Pedir ayuda en RStudio", " 3.3 Pedir ayuda en RStudio "],["limpieza-de-datos-valores-perdidos.html", "3.4 Limpieza de datos: valores perdidos", " 3.4 Limpieza de datos: valores perdidos "],["flujos-de-trabajo-con-tidyverse.html", "Capítulo 4 Flujos de trabajo con tidyverse ", " Capítulo 4 Flujos de trabajo con tidyverse "],["pipe.html", "4.1 Pipe", " 4.1 Pipe "],["tablas-anchas-y-largas.html", "4.2 Tablas anchas y largas", " 4.2 Tablas anchas y largas "],["filtrado.html", "4.3 Filtrado", " 4.3 Filtrado "],["selección.html", "4.4 Selección", " 4.4 Selección "],["agrupamiento-reordenamiento-y-conteo.html", "4.5 Agrupamiento, Reordenamiento y conteo", " 4.5 Agrupamiento, Reordenamiento y conteo "],["transformación-y-creación-de-columnas.html", "4.6 Transformación y creación de columnas", " 4.6 Transformación y creación de columnas "],["resúmenes-estadísticos.html", "4.7 Resúmenes estadísticos", " 4.7 Resúmenes estadísticos "],["combinar-bases-de-datos.html", "4.8 Combinar bases de datos", " 4.8 Combinar bases de datos "],["probabilidades.html", "Capítulo 5 Probabilidades", " Capítulo 5 Probabilidades "],["estadística-descriptiva.html", "Capítulo 6 Estadística descriptiva", " Capítulo 6 Estadística descriptiva "],["test-de-normalidad.html", "Capítulo 7 Test de normalidad", " Capítulo 7 Test de normalidad "],["test-de-comparaciones-de-grupos.html", "Capítulo 8 Test de comparaciones de grupos", " Capítulo 8 Test de comparaciones de grupos "],["introducción-a-los-modelos-lineales.html", "Capítulo 9 Introducción a los modelos lineales", " Capítulo 9 Introducción a los modelos lineales "],["correlaciones.html", "Capítulo 10 Correlaciones", " Capítulo 10 Correlaciones "],["análisis-de-varianza.html", "Capítulo 11 Análisis de varianza", " Capítulo 11 Análisis de varianza "],["análosis-de-poder.html", "Capítulo 12 Análosis de poder", " Capítulo 12 Análosis de poder "],["probabilidades-1.html", "Capítulo 13 Probabilidades", " Capítulo 13 Probabilidades "],["estadística-descriptiva-1.html", "Capítulo 14 Estadística descriptiva", " Capítulo 14 Estadística descriptiva "],["test-de-normalidad-1.html", "Capítulo 15 Test de normalidad", " Capítulo 15 Test de normalidad "],["test-de-comparaciones-de-grupos-1.html", "Capítulo 16 Test de comparaciones de grupos", " Capítulo 16 Test de comparaciones de grupos "],["introducción-a-los-modelos-lineales-1.html", "Capítulo 17 Introducción a los modelos lineales", " Capítulo 17 Introducción a los modelos lineales "],["correlaciones-1.html", "Capítulo 18 Correlaciones", " Capítulo 18 Correlaciones "],["análisis-de-varianza-1.html", "Capítulo 19 Análisis de varianza", " Capítulo 19 Análisis de varianza "],["análisis-de-poder.html", "Capítulo 20 Análisis de poder", " Capítulo 20 Análisis de poder "],["regresión-lineal-clásica-lm.html", "Capítulo 21 Regresión lineal clásica (LM) ", " Capítulo 21 Regresión lineal clásica (LM) "],["mínimos-cuadrados-y-máxima-verosimilitud.html", "21.1 Mínimos cuadrados y máxima verosimilitud", " 21.1 Mínimos cuadrados y máxima verosimilitud "],["propiedades-de-los-estimadores.html", "21.2 Propiedades de los estimadores", " 21.2 Propiedades de los estimadores "],["regresión-lineal-múltiple.html", "21.3 Regresión lineal múltiple", " 21.3 Regresión lineal múltiple "],["selección-de-modelos.html", "21.4 Selección de modelos", " 21.4 Selección de modelos "],["modelos-lineales-generalizados-glm.html", "Capítulo 22 Modelos lineales generalizados (GLM) ", " Capítulo 22 Modelos lineales generalizados (GLM) "],["logística.html", "22.1 Logística", " 22.1 Logística "],["binomial.html", "22.2 Binomial", " 22.2 Binomial "],["poisson.html", "22.3 Poisson", " 22.3 Poisson "],["binomial-negativa.html", "22.4 Binomial Negativa", " 22.4 Binomial Negativa "],["hurdle-y-zero-inflados.html", "22.5 Hurdle y Zero inflados", " 22.5 Hurdle y Zero inflados "],["weibull.html", "22.6 Weibull", " 22.6 Weibull "],["gamma.html", "22.7 Gamma", " 22.7 Gamma "],["beta.html", "22.8 Beta", " 22.8 Beta "],["modelos-de-efectos-mixtos-clásica-lmm-y-generalizados-glmm.html", "Capítulo 23 Modelos de efectos mixtos: clásica (LMM) y generalizados (GLMM)", " Capítulo 23 Modelos de efectos mixtos: clásica (LMM) y generalizados (GLMM) "],["métodos-interdependientes.html", "Capítulo 24 Métodos interdependientes ", " Capítulo 24 Métodos interdependientes "],["clustering-jerárquico.html", "24.1 Clustering jerárquico", " 24.1 Clustering jerárquico "],["clustering-no-jerárquico.html", "24.2 Clustering no jerárquico", " 24.2 Clustering no jerárquico "],["análisis-de-componentes-principales-pca.html", "24.3 Análisis de componentes principales (PCA)", " 24.3 Análisis de componentes principales (PCA) "],["análisis-de-coordenadas-principales-mds.html", "24.4 Análisis de coordenadas principales (MDS)", " 24.4 Análisis de coordenadas principales (MDS) "],["escalamiento-multidimensional-no-métrico-nmds.html", "24.5 Escalamiento multidimensional no métrico (NMDS)", " 24.5 Escalamiento multidimensional no métrico (NMDS) "],["métodos-canónicos.html", "Capítulo 25 Métodos Canónicos ", " Capítulo 25 Métodos Canónicos "],["análisis-de-correspondencia-canónica-cca.html", "25.1 Análisis de correspondencia canónica (CCA)", " 25.1 Análisis de correspondencia canónica (CCA) "],["análisis-de-redundancia-rda.html", "25.2 Análisis de redundancia (RDA)", " 25.2 Análisis de redundancia (RDA) "],["análisis-discriminante-lda-qda.html", "25.3 Análisis discriminante (LDA, QDA)", " 25.3 Análisis discriminante (LDA, QDA) "],["análisis-de-multiples-factores-mfa.html", "25.4 Análisis de Multiples Factores (MFA)", " 25.4 Análisis de Multiples Factores (MFA) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
